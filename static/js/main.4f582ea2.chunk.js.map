{"version":3,"sources":["components/Card.js","components/Wrapper/Wrapper.js","App.js","index.js"],"names":["Card","props","className","alt","name","src","image","onClick","clickPicture","id","Wrapper","shakeWrapper","pictures","App","state","cards","clickedArray","topScore","score","message","shakeit","shuffledArray","shuffleArray","setState","includes","concat","picturesArray","i","length","j","Math","floor","random","this","map","picture","key","Component","ReactDOM","render","document","getElementById"],"mappings":"m7DAYeA,G,YATF,SAAAC,GAAK,OAChB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,+BAA+BC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,QAAS,kBAAMN,EAAMO,aAAaP,EAAMQ,WCDhHC,G,MAFC,SAAAT,GAAK,OAAI,yBAAKC,UAAiC,SAArBD,EAAMU,aAAwB,eAAiB,WAAYV,EAAMW,Y,OC6E5FC,E,2MAxEbC,MAAQ,CACNC,QACAC,aAAc,GACdC,SAAU,EACVC,MAAO,EACPC,QAAS,GACTC,QAAS,S,EAGXZ,aAAe,SAAAC,GAEb,IAAMY,EAAgB,EAAKC,aAAaP,GACxC,EAAKQ,SAAS,CAACR,MAAOM,IAElB,EAAKP,MAAME,aAAaQ,SAASf,GACnC,EAAKc,SAAS,CAAEL,MAAO,EAAGF,aAAc,GAAIG,QAAS,mEAA0DC,QAAS,SAGxH,EAAKG,SAAS,CACZP,aAAc,EAAKF,MAAME,aAAaS,OAAO,CAAChB,IAC9CS,MAAO,EAAKJ,MAAMI,MAAQ,EAC1BC,QAAS,yBACTC,QAAS,UAKT,EAAKN,MAAMI,MAAQ,EAAKJ,MAAMG,UAChC,EAAKM,SAAS,CAAEN,SAAU,EAAKH,MAAMI,S,EAIzCI,aAAe,SAACI,GACZ,IAAK,IAAIC,EAAID,EAAcE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC/C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADK,EAER,CAACD,EAAcG,GAAIH,EAAcC,IAAvED,EAAcC,GAFgC,KAE5BD,EAAcG,GAFc,KAInD,OAAOH,G,wEAED,IAAD,OACP,OACE,yBAAKxB,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,mCAEF,wBAAIA,UAAU,aACd,wBAAIA,UAAY,SAAQ,+CAAqB+B,KAAKnB,MAAMI,MAAhC,mBAAuDe,KAAKnB,MAAMG,WAC1F,wBAAIf,UAAU,WAAU,gCAAS+B,KAAKnB,MAAMK,UAC5C,iKAGA,kBAAC,EAAD,CACAR,aAAgBsB,KAAKnB,MAAMM,QAC3BR,SACGqB,KAAKnB,MAAMC,MAAMmB,KAAI,SAAAC,GAAO,OAC3B,kBAAC,EAAD,CACE3B,aAAc,EAAKA,aACnBC,GAAI0B,EAAQ1B,GACZ2B,IAAKD,EAAQ1B,GACbH,MAAO6B,EAAQ7B,aAIrB,4BAAQJ,UAAU,UACpB,yBAAKA,UAAU,aACb,0BAAMA,UAAU,cAAhB,wC,GAnEUmC,aCAlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.4f582ea2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./CardStyle.css\";\n\nconst Card = props => (\n  <div className=\"card\">\n    <div className=\"img-container\">\n      <img className=\"img-thumbnail img-responsive\" alt={props.name} src={props.image} onClick={() => props.clickPicture(props.id)}/>\n    </div>\n  </div>\n);\n\n\nexport default Card;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className= {props.shakeWrapper===\"true\" ? \"wrapperShake\" : \"wrapper\"}>{props.pictures}</div>;\n\nexport default Wrapper;","import React, { Component } from 'react';\nimport './App.css';\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n  //Setting this.state.cards to the cards json array\n  state = {\n    cards,\n    clickedArray: [],\n    topScore: 0,\n    score: 0,\n    message: \"\",\n    shakeit: \"false\"\n  };\n  \n  clickPicture = id => {\n    // Arrange the pictures in a random manner\n    const shuffledArray = this.shuffleArray(cards);\n    this.setState({cards: shuffledArray});\n    // if clicked an image already clicked set this.state.score = 0; empty clickeadArray, end of if block\n    if (this.state.clickedArray.includes(id)) {\n      this.setState({ score: 0, clickedArray: [], message: \"Incorrect!! Game Over ☹️ Click an image to play again!\", shakeit: \"true\"});\n    }\n    else {\n      this.setState({\n        clickedArray: this.state.clickedArray.concat([id]),\n        score: this.state.score + 1,\n        message: \"Correct!! 🙂\",\n        shakeit: \"false\"\n      });\n    }\n    \n    // set topscore = score if score>topscore.\n    if (this.state.score > this.state.topScore) {\n      this.setState({ topScore: this.state.score });\n    }\n    // shake the wrapper if shakeit is set to true\n  }\n  shuffleArray = (picturesArray) => {\n      for (let i = picturesArray.length - 1; i > 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          [picturesArray[i], picturesArray[j]] = [picturesArray[j], picturesArray[i]];\n      }\n      return picturesArray;\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Welcome to React Memory Game!!</h1>\n        </header>\n        <h3 className=\"App-intro\">\n        <h2 className = \"score\"><strong>Your Score: {this.state.score} | Total Score: {this.state.topScore}</strong></h2>\n        <h4 className=\"message\"><strong>{this.state.message}</strong></h4>\n        <strong>Click each emoji once to earn point. \n        If an emoji is clicked twice, the game will reset and you will lose all of your points!</strong> \n        </h3>\n        <Wrapper\n        shakeWrapper = {this.state.shakeit}\n        pictures=\n          {this.state.cards.map(picture => (\n            <Card\n              clickPicture={this.clickPicture}\n              id={picture.id}\n              key={picture.id} // to get rid of unique key prop warning\n              image={picture.image}\n            />\n          ))}\n        />\n        <footer className=\"footer\">\n      <div className=\"container\">\n        <span className=\"text-muted\">&copy; Memory Game - React app.</span>\n      </div>\n    </footer> \n      </div>\n    );\n  }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}